<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task-3.0.xsd 
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/cache 
     	http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
	<mvc:annotation-driven/>
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.hadoop.dao, com.hadoop.service, com.hadoop.memcache"/>
		
	<!-- 启用 Aspectj AOP -->
	<!--  
	<aop:aspectj-autoproxy/>
	-->
	
	<!-- 引入memcache注解, 使用的是 simple-spring-memcached 注解 (需要开启Aspectj AOP)-->
	<!-- 
	<import resource="classpath:memcache/simple-spring-memcached.xml"/>
	 -->
	 
	<!-- 启用缓存 -->
	<cache:annotation-driven/>
	<!-- memcache使用spring自带的注解 -->
	<import resource="classpath:spring/spring-cache.xml"/>
	 
	<!-- 引入配置文件 -->
	<!--  
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>
	-->
	<!-- 引入多个配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list> 
				<value>classpath:config/jdbc.properties</value>
				<value>classpath:config/memcached.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 数据库源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis配置文件路径 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/hadoop/mapper/*/*.xml"/>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hadoop.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 客户端：java_memcached-release_2.6.6 -->
	<!--  
	<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance"
		init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>memcachedPool</value>
		</constructor-arg>
		<property name="servers">
			<list><value>${memcache.server}</value></list>
		</property>
		<property name="weights">
			<list><value>${memcache.weights}</value></list>
		</property>
		<property name="initConn" value="${memcache.initConn}"/>
		<property name="minConn" value="${memcache.minConn}"/>
		<property name="maxConn" value="${memcache.maxConn}"/>
		<property name="maintSleep" value="${memcache.maintSleep}"/>
		<property name="nagle" value="${memcache.nagle}"/>
		<property name="socketTO" value="${memcache.socketTO}"/>
	</bean>
	<bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>memcachedPool</value>
		</constructor-arg>
	</bean>
	-->

</beans>